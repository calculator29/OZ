var camera, scene, renderer;
var gl_scene, gl_renderer;
var controls;
var object;
var stats;
var camera_move = 0;
var ua = navigator.userAgent;

if (ua.indexOf('iPhone') > 0 || ua.indexOf('iPod') > 0 || ua.indexOf('Android') > 0) {
  var sp = true;
}else if(ua.indexOf('iPad') > 0 || ua.indexOf('Android') > 0){
  var sp = true;
}

init();
animate();


function init() {
  createScene();
  createGLScene();
  createCamera();
      
  createDisplay();
  createGround();

  createRandomBox();

  createLight();
  
  createControls();
    
  window.addEventListener('resize', onWindowResize, false);
  
  createBlocker();
  createStats();
}

function animate() {
  controls.update();
  renderer.render(scene, camera);
  gl_renderer.render(gl_scene, camera);
  if(camera_move == 1 ) Foward();
  if(camera_move == -1 ) Back();
  stats.update();
  requestAnimationFrame(animate);
}






function createScene(){
  scene = new THREE.Scene(); 
  renderer = new THREE.CSS3DRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);
  renderer.domElement.style.zIndex = 0;
  renderer.domElement.style.position = 'absolute';  
}

function createGLScene(){
  gl_scene = new THREE.Scene();
  gl_scene.fog = new THREE.FogExp2(0xffffff, 0.01);
  gl_renderer = new THREE.WebGLRenderer({alpha:true});
  gl_renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(gl_renderer.domElement);
  gl_renderer.domElement.style.zIndex = 1;
  gl_renderer.domElement.style.position = 'absolute';
  gl_renderer.shadowMap.enabled = true;
  //   gl_renderer.domElement.style.display = 'none';
}

function createCamera(){
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 500);
  camera.position.y = 1.5;
  camera.position.z = 3.5;  
}

function createLight(){
  var ambientLight = new THREE.AmbientLight(0x333333);
  gl_scene.add(ambientLight);
  var directionalLight = new THREE.DirectionalLight(0xffffff);
  directionalLight.position.set( 5, 50, 5 );
  directionalLight.castShadow            = true;
  directionalLight.shadow.camera.left    = -30;
  directionalLight.shadow.camera.right   =  30;
  directionalLight.shadow.camera.bottom  = -30;
  directionalLight.shadow.camera.top     =  30;
  directionalLight.shadow.camera.far     = 100;
  directionalLight.shadow.mapSize.width  = 2048;
  directionalLight.shadow.mapSize.height = 2048;
  gl_scene.add(directionalLight);    
}

function createControls(){
  if(sp) {
    controls = new THREE.DeviceOrientationControls(camera,renderer.domElement);
    controls.connect();
  } else {
    controls = new THREE.TrackballControls(camera);
  }

  document.body.addEventListener('touchmove', function(event) {
    event.preventDefault();
  }, false); 
  document.addEventListener( 'touchstart', OnTouch, false );
  document.addEventListener( 'touchend', function(){camera_move = 0;}, false );

}








function createPlane(w, h, position, rotation) {
  var  material = new THREE.MeshBasicMaterial({
    color: 0x000000,
    opacity: 0.0,
    side: THREE.DoubleSide
  });
  var geometry = new THREE.PlaneGeometry(w, h);
  var mesh = new THREE.Mesh(geometry, material);
  mesh.position.x = position.x;
  mesh.position.y = position.y;
  mesh.position.z = position.z;
  mesh.rotation.x = rotation.x;
  mesh.rotation.y = rotation.y;
  mesh.rotation.z = rotation.z;
  return mesh;
}

function create3dPage( w, h, position, rotation, url ) {
  var plane = createPlane( w, h, position, rotation );
  gl_scene.add( plane );
  
  var div = document.createElement('div');
  div.style.width = 1000*w+'px';
  div.style.height = 1000*h+'px';
  div.style.overflow = 'auto';
  div.style.WebkitOverflowScrolling = 'touch';
    
  var iframe = document.createElement('iframe');  
  iframe.style.width = '100%';
  iframe.style.height = '100%';
  iframe.style.display = 'block';
  iframe.style.zoom = '0.001';
  iframe.src = url;
  
  div.appendChild(iframe);
  
  var cssObject = new THREE.CSS3DObject(div);
  
  cssObject.position.x = position.x;
  cssObject.position.y = position.y;
  cssObject.position.z = position.z;
  cssObject.rotation.x = rotation.x;
  cssObject.rotation.y = rotation.y;
  cssObject.rotation.z = rotation.z;

  cssObject.scale.set(0.001,0.001,0.001);
  
  scene.add(cssObject);
}

function createDisplay(){
  var box0 = new THREE.Mesh(
    new THREE.BoxGeometry(1.99,2,1.99),
    new THREE.MeshPhongMaterial({color: 0x999999})
  );
  
  box0.position.y = 1;
  box0.castShadow = true;
  box0.receiveShadow = true;
  gl_scene.add(box0);
    
  create3dPage(
    1.8, 1.8,
    new THREE.Vector3(0, 1, -1),
    new THREE.Vector3(0, Math.PI, 0),
    'https://www.calculator29.com'
  );
  create3dPage(
    1.8, 1.8,
    new THREE.Vector3(1, 1, 0),
    new THREE.Vector3(0, Math.PI/2.0, 0),
    'https://www.calculator29.com/Robots'
  );
  create3dPage(
    1.8, 1.8,
    new THREE.Vector3(0, 1, 1),
    new THREE.Vector3(0, 0, 0),
    'https://www.calculator29.com/Software'
  );

  create3dPage(
    1.8, 1.8,
    new THREE.Vector3(-1, 1, 0),
    new THREE.Vector3(0, -Math.PI/2.0, 0),
    'https://www.calculator29.com/Design'
  );    
}

function createGround(){
  var plane = new THREE.Mesh(
    new THREE.PlaneGeometry(1000,1000),
    new THREE.MeshPhongMaterial({color: 0x555555})
  );
  plane.rotation.x = -Math.PI/2.0;
  plane.receiveShadow = true;
  gl_scene.add(plane);  
}


function createRandomBox(){
  for(var i=0;i<50;i++){
    var pos = {
      x: 30*(Math.random()-0.5),
      y: 20*Math.random(),
      z: 30*(Math.random()-0.5)
    };
    for(var j=0;j<10;j++){
      var Size = Math.random();
      var box = new THREE.Mesh(
        new THREE.BoxGeometry(Size,Size,Size),
        new THREE.MeshPhongMaterial({color: Math.random()*0xffffff})
      );
      
      box.position.x = pos.x + 3*(Math.random()-0.5);
      box.position.y = pos.y + 3*(Math.random()-0.5);
      box.position.z = pos.z + 3*(Math.random()-0.5);
        
      box.castShadow = true;
      
      gl_scene.add(box);
    }
  }  
}






function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight); 
  gl_renderer.setSize(window.innerWidth, window.innerHeight); 
}

function createBlocker(){
  var blocker = document.createElement( 'blocker' );
  blocker.style.display = 'none';
  document.addEventListener( 'mousedown', function () { blocker.style.display = ''; } );
  document.addEventListener( 'mouseup', function () { blocker.style.display = 'none'; } );    
}

function createStats(){
  stats = new Stats();
  document.body.appendChild( stats.dom );  
}








function Foward(){
  var forward = new THREE.Vector4(0, 0, 1, 0);
  forward.applyMatrix4(camera.matrix).normalize();
  forward.multiplyScalar(-0.1);
  camera.position.add(forward);
}

function Back(){
  var forward = new THREE.Vector4(0, 0, 1, 0);
  forward.applyMatrix4(camera.matrix).normalize();
  forward.multiplyScalar(0.1);
  camera.position.add(forward);
}

function OnTouch(ev){
  var x = ev.pageX / window.innerHeight;
  var y = ev.pageY / window.innerWidth;
  if(y<0.5) camera_move = 1;
  else camera_move = -1;
};
